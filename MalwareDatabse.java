import java.sql.*;
import java.time.LocalDateTime;
import java.util.*;

public class MalwareDatabase {
    private static final String DB_URL = "jdbc:sqlite:malware_analysis.db";

    // Setup database: Create tables and insert sample data
    public static void setupDatabase() throws SQLException {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             Statement stmt = conn.createStatement()) {
            // Create tables
            stmt.execute("""
                CREATE TABLE IF NOT EXISTS samples (
                    sample_id INTEGER PRIMARY KEY,
                    md5 TEXT NOT NULL UNIQUE,
                    detection_time TEXT
                )
            """);

            stmt.execute("""
                CREATE TABLE IF NOT EXISTS features (
                    sample_id INTEGER,
                    file_writes INTEGER,
                    file_reads INTEGER,
                    network_connections INTEGER,
                    registry_modifications INTEGER,
                    process_creations INTEGER,
                    FOREIGN KEY (sample_id) REFERENCES samples(sample_id)
                )
            """);

            stmt.execute("""
                CREATE TABLE IF NOT EXISTS clusters (
                    sample_id INTEGER,
                    cluster_id INTEGER,
                    assignment_time TEXT,
                    FOREIGN KEY (sample_id) REFERENCES samples(sample_id)
                )
            """);

            // Insert 10 sample malware records
            Random rand = new Random();
            String detectionTime = LocalDateTime.now().toString();
            try (PreparedStatement psSample = conn.prepareStatement(
                    "INSERT OR IGNORE INTO samples (sample_id, md5, detection_time) VALUES (?, ?, ?)")) {
                try (PreparedStatement psFeature = conn.prepareStatement(
                        "INSERT INTO features (sample_id, file_writes, file_reads, network_connections, registry_modifications, process_creations) VALUES (?, ?, ?, ?, ?, ?)")) {
                    for (int i = 0; i < 10; i++) {
                        int sampleId = rand.nextInt(10000) + 1;
                        String md5 = "hash" + (rand.nextInt(9000) + 1000);
                        int fileWrites = rand.nextInt(51);
                        int fileReads = rand.nextInt(31);
                        int networkConnections = rand.nextInt(21);
                        int registryMods = rand.nextInt(41);
                        int processes = rand.nextInt(11);

                        // Insert sample
                        psSample.setInt(1, sampleId);
                        psSample.setString(2, md5);
                        psSample.setString(3, detectionTime);
                        psSample.executeUpdate();

                        // Insert features
                        psFeature.setInt(1, sampleId);
                        psFeature.setInt(2, fileWrites);
                        psFeature.setInt(3, fileReads);
                        psFeature.setInt(4, networkConnections);
                        psFeature.setInt(5, registryMods);
                        psFeature.setInt(6, processes);
                        psFeature.executeUpdate();
                    }
                }
            }
        }
    }

    // Fetch features from database
    public static List<MalwareSample> getFeatureMatrix() throws SQLException {
        List<MalwareSample> samples = new ArrayList<>();
        try (Connection conn = DriverManager.getConnection(DB_URL);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("""
                 SELECT s.sample_id, s.md5, f.file_writes, f.file_reads, f.network_connections, 
                        f.registry_modifications, f.process_creations
                 FROM samples s
                 JOIN features f ON s.sample_id = f.sample_id
             """)) {
            while (rs.next()) {
                int sampleId = rs.getInt("sample_id");
                String md5 = rs.getString("md5");
                double[] features = new double[] {
                    rs.getInt("file_writes"),
                    rs.getInt("file_reads"),
                    rs.getInt("network_connections"),
                    rs.getInt("registry_modifications"),
                    rs.getInt("process_creations")
                };
                samples.add(new MalwareSample(sampleId, md5, features));
            }
        }
        return samples;
    }

    // Store clustering results in database
    public static void storeClusters(List<MalwareSample> samples, int[] clusterLabels) throws SQLException {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement(
                     "INSERT OR REPLACE INTO clusters (sample_id, cluster_id, assignment_time) VALUES (?, ?, ?)")) {
            String assignmentTime = LocalDateTime.now().toString();
            for (int i = 0; i < samples.size(); i++) {
                ps.setInt(1, samples.get(i).sampleId);
                ps.setInt(2, clusterLabels[i]);
                ps.setString(3, assignmentTime);
                ps.executeUpdate();
            }
        }
    }

    // Query samples in a specific cluster
    public static List<MalwareSample> getSamplesInCluster(int clusterId) throws SQLException {
        List<MalwareSample> samples = new ArrayList<>();
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement("""
                 SELECT s.sample_id, s.md5, f.file_writes, f.file_reads, f.network_connections, 
                        f.registry_modifications, f.process_creations
                 FROM samples s
                 JOIN features f ON s.sample_id = f.sample_id
                 JOIN clusters c ON s.sample_id = c.sample_id
                 WHERE c.cluster_id = ?
             """)) {
            ps.setInt(1, clusterId);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                int sampleId = rs.getInt("sample_id");
                String md5 = rs.getString("md5");
                double[] features = new double[] {
                    rs.getInt("file_writes"),
                    rs.getInt("file_reads"),
                    rs.getInt("network_connections"),
                    rs.getInt("registry_modifications"),
                    rs.getInt("process_creations")
                };
                samples.add(new MalwareSample(sampleId, md5, features));
            }
        }
        return samples;
    }
}
